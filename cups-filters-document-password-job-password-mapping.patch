diff --git a/cupsfilters/ppdgenerator.c b/cupsfilters/ppdgenerator.c
index 0d4dd7097..7886d78ca 100644
--- a/cupsfilters/ppdgenerator.c
+++ b/cupsfilters/ppdgenerator.c
@@ -1812,6 +1812,16 @@ ppdCreateFromIPP2(char         *buffer,          /* I - Filename buffer */
       cupsFilePuts(fp, "*ColorDevice: False\n");
   }
 
+  if ((attr = ippFindAttribute(response,
+			       "landscape-orientation-requested-preferred",
+			       IPP_TAG_ZERO)) != NULL)
+  {
+    if (ippGetInteger(attr, 0) == 4)
+      cupsFilePuts(fp, "*LandscapeOrientation: Plus90\n");
+    else if (ippGetInteger(attr, 0) == 5)
+      cupsFilePuts(fp, "*LandscapeOrientation: Minus90\n");
+  }
+
   cupsFilePrintf(fp, "*cupsVersion: %d.%d\n", CUPS_VERSION_MAJOR,
 		 CUPS_VERSION_MINOR);
   cupsFilePuts(fp, "*cupsSNMPSupplies: False\n");
diff --git a/filter/pdftopdf/pdftopdf.cc b/filter/pdftopdf/pdftopdf.cc
index 7a684a260..0514c0dec 100644
--- a/filter/pdftopdf/pdftopdf.cc
+++ b/filter/pdftopdf/pdftopdf.cc
@@ -305,6 +305,20 @@ void getParameters(ppd_file_t *ppd,int num_options,cups_option_t *options,Proces
 {
   const char *val;
 
+  /* macOS and Windows print dialogs don't have support for document-password but do for job-password,
+   * so we map job-password to document-password when the printer doesn't support job-password.
+   */
+  if ((val = cupsGetOption("job-password",num_options,options)) != NULL && ppdFindAttr(ppd,"cupsJobPassword",0) == NULL) {
+      param.document_password = val;
+      param.preserve_encryption = false;
+  }
+
+  /* iOS/iPadOS have support for document-password, so preserve encryption of original document */
+  if ((val = cupsGetOption("document-password",num_options,options)) != NULL) {
+      param.document_password = val;
+      param.preserve_encryption = true;
+  }
+
   if ((val = cupsGetOption("copies",num_options,options)) != NULL) {
     int copies = atoi(val);
     if (copies > 0)
@@ -1313,7 +1327,7 @@ int main(int argc,char **argv)
     emitComment(*proc,param); // pass information to subsequent filters via PDF comments
 
     //proc->emitFile(stdout);
-    proc->emitFilename(NULL);
+    proc->emitFilename(NULL, param.preserve_encryption, param.document_password);
 
     emitPostamble(ppd,param);
     ppdClose(ppd);
diff --git a/filter/pdftopdf/pdftopdf_processor.h b/filter/pdftopdf/pdftopdf_processor.h
index 3d64d1a4e..5d743005d 100644
--- a/filter/pdftopdf/pdftopdf_processor.h
+++ b/filter/pdftopdf/pdftopdf_processor.h
@@ -13,6 +13,8 @@ struct ProcessingParameters {
 ProcessingParameters()
 : jobId(0),numCopies(1),
     user(0),title(0),
+    document_password(0),
+    preserve_encryption(false),
     fitplot(false),
     fillprint(false),  //print-scaling = fill
     cropfit(false),
@@ -59,6 +61,8 @@ ProcessingParameters()
 
   int jobId, numCopies;
   const char *user, *title; // will stay around
+  const char *document_password;
+  bool preserve_encryption;
   bool fitplot;
   bool fillprint;   //print-scaling = fill
   bool cropfit;     // -o crop-to-fit
@@ -154,7 +158,7 @@ class PDFTOPDF_Processor { // abstract interface
   virtual void setComments(const std::vector<std::string> &comments) =0;
 
   virtual void emitFile(FILE *dst,ArgOwnership take=WillStayAlive) =0;
-  virtual void emitFilename(const char *name) =0; // NULL -> stdout
+  virtual void emitFilename(const char *name,bool preserve_encryption,const char *document_password) =0; // NULL -> stdout
 
   virtual bool hasAcroForm() =0;
 };
diff --git a/filter/pdftopdf/qpdf_pdftopdf_processor.cc b/filter/pdftopdf/qpdf_pdftopdf_processor.cc
index 2420e1f47..1b9ef8e85 100644
--- a/filter/pdftopdf/qpdf_pdftopdf_processor.cc
+++ b/filter/pdftopdf/qpdf_pdftopdf_processor.cc
@@ -730,7 +730,7 @@ void QPDF_PDFTOPDF_Processor::emitFile(FILE *f,ArgOwnership take) // {{{
 }
 // }}}
 
-void QPDF_PDFTOPDF_Processor::emitFilename(const char *name) // {{{
+void QPDF_PDFTOPDF_Processor::emitFilename(const char *name, bool preserve_encryption, const char *document_password) // {{{
 {
   if (!pdf) {
     return;
@@ -745,7 +745,23 @@ void QPDF_PDFTOPDF_Processor::emitFilename(const char *name) // {{{
   if (!extraheader.empty()) {
     out.setExtraHeaderText(extraheader);
   }
-  out.setPreserveEncryption(false);
+
+  if (document_password) {
+    out.setR6EncryptionParameters(
+        document_password,
+        document_password,
+        true,
+        true,
+        true,
+        true,
+        true,
+        true,
+        qpdf_r3_print_e::qpdf_r3p_full,
+        false);
+  }
+
+  out.setPreserveEncryption(preserve_encryption);
+
   std::vector<QPDFObjectHandle> pages=pdf->getAllPages();
   int len=pages.size();
   if (len)
diff --git a/filter/pdftopdf/qpdf_pdftopdf_processor.h b/filter/pdftopdf/qpdf_pdftopdf_processor.h
index 51e0d4f7a..560c63c0f 100644
--- a/filter/pdftopdf/qpdf_pdftopdf_processor.h
+++ b/filter/pdftopdf/qpdf_pdftopdf_processor.h
@@ -56,7 +56,7 @@ class QPDF_PDFTOPDF_Processor : public PDFTOPDF_Processor {
   virtual void setComments(const std::vector<std::string> &comments);
 
   virtual void emitFile(FILE *dst,ArgOwnership take=WillStayAlive);
-  virtual void emitFilename(const char *name);
+  virtual void emitFilename(const char *name, bool preserve_encryption=false, const char *document_password=NULL);
 
   virtual bool hasAcroForm();
  private:
